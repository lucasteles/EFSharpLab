// <auto-generated />
using System;
using System.Collections.Generic;
using EFSharpLab;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EFSharpLab.Migrations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EFSharpLab.Models.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.ComplexProperty<Dictionary<string, object>>("Meta", "EFSharpLab.Models.Blog.Meta#Meta", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<char?>("State")
                                .HasColumnType("character(1)");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");
                        });

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("EFSharpLab.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.ComplexProperty<Dictionary<string, object>>("Meta", "EFSharpLab.Models.Comment.Meta#Meta", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<char?>("State")
                                .HasColumnType("character(1)");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");
                        });

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("EFSharpLab.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.ComplexProperty<Dictionary<string, object>>("Meta", "EFSharpLab.Models.Post.Meta#Meta", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<char?>("State")
                                .HasColumnType("character(1)");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");
                        });

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("EFSharpLab.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<char?>("Gender")
                        .HasColumnType("character(1)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ComplexProperty<Dictionary<string, object>>("Meta", "EFSharpLab.Models.User.Meta#Meta", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<char?>("State")
                                .HasColumnType("character(1)");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");
                        });

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("EFSharpLab.Models.Blog", b =>
                {
                    b.HasOne("EFSharpLab.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("EFSharpLab.Models.Comment", b =>
                {
                    b.HasOne("EFSharpLab.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("EFSharpLab.Models.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("EFSharpLab.Models.Post", b =>
                {
                    b.HasOne("EFSharpLab.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("EFSharpLab.Models.Blog", null)
                        .WithMany()
                        .HasForeignKey("BlogId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("EFSharpLab.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
